name: Build Image → Push to ECR → Push Helm Chart (OCI)

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  AWS_BOOTSTRAP_ROLE: ${{ vars.AWS_BOOTSTRAP_ROLE }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO: ${{ vars.ECR_REPO || 'liatrio-demo-app' }}
  CHART_DIR: charts/demo-app
  ECR_CHART_REPO: ${{ vars.ECR_HELM_REPO || 'demo-app-chart' }}

jobs:
  build-push-image-and-chart:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
    env:
      IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION || 'us-east-1' }}.amazonaws.com/${{ vars.ECR_REPO || 'liatrio-demo-app' }}
      OCI_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION || 'us-east-1' }}.amazonaws.com
    steps:
      - uses: actions/checkout@v5

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.AWS_BOOTSTRAP_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: pr-demo-aws-${{ github.run_id }}

      - name: Ensure ECR image repo exists
        run: |
          aws ecr describe-repositories --repository-names "${ECR_REPO}" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "${ECR_REPO}" >/dev/null

      - name: Login to Amazon ECR (Docker)
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_URI }}
          tags: |
            # Semver from tag vX.Y.Z → X.Y.Z (primary publish tag)
            type=semver,pattern={{version}}
            # Branch tag
            type=ref,event=branch
            # SHA fallback
            type=sha

      - name: Decide single IMAGE_TAG for appVersion
        id: tag
        run: |
          # Prefer semver (if present), else branch-SHA
          SEMVER_TAG="$(echo "${{ steps.meta.outputs.tags }}" | tr ' ' '\n' | grep -E ":([0-9]+\.[0-9]+\.[0-9]+)$" | head -n1 | awk -F: '{print $2}')"
          if [ -n "$SEMVER_TAG" ]; then
            IMAGE_TAG="$SEMVER_TAG"
          else
            BRANCH="${GITHUB_REF_NAME//\//-}"
            SHORT_SHA="$(echo "${GITHUB_SHA}" | cut -c1-12)"
            IMAGE_TAG="${BRANCH}-${SHORT_SHA}"
          fi
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG"
      
      - name: Build and push image to ECR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # --- Helm chart packaging + push to ECR (OCI) ---
      - name: Ensure ECR Helm (OCI) repo exists
        run: |
          aws ecr describe-repositories --repository-names "${ECR_CHART_REPO}" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "${ECR_CHART_REPO}" --image-scanning-configuration scanOnPush=true >/dev/null

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Login to Amazon ECR (Helm OCI)
        run: |
          aws ecr get-login-password --region "${AWS_REGION}" | \
            helm registry login "${OCI_REGISTRY}" --username AWS --password-stdin

      # Set Chart.appVersion to the IMAGE_TAG (so chart pulls that image by default)
      - name: Bump Chart.appVersion to image tag
        run: |
          yq -i ".appVersion = \"${{ steps.tag.outputs.IMAGE_TAG }}\"" "${CHART_DIR}/Chart.yaml"
        shell: bash
      - name: Install yq
        uses: mikefarah/yq@v4.44.3

      # Option A: keep chart version independent (leave as-is in Chart.yaml)
      # Option B: tie chart version to image tag (uncomment to sync them)
      # - name: (Optional) Set chart version to image tag
      #   run: yq -i ".version = \"${{ steps.tag.outputs.IMAGE_TAG }}\"" "${CHART_DIR}/Chart.yaml"

      - name: Package chart
        run: |
          mkdir -p dist
          helm package "${CHART_DIR}" --destination dist
          ls -l dist

      - name: Push chart to ECR OCI
        run: |
          FILE=$(ls dist/*.tgz)
          echo "Pushing $FILE"
          helm push "$FILE" oci://${OCI_REGISTRY}/${ECR_CHART_REPO}
