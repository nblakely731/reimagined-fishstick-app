name: Docker Publish (ECR)

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  AWS_ASSUME_ROLE: ${{ vars.AWS_ASSUME_ROLE }}
  ECR_REPO: ${{ vars.ECR_REPO || 'demo-app' }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION || 'us-east-1' }}.amazonaws.com/${{ vars.ECR_REPO || 'liatrio-demo-app' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v5

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: ecr-push-demo-aws-${{ github.run_id }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install dependencies with uv
        run: |
          if [ -f pyproject.toml ]; then
            uv sync --locked || uv sync
          elif [ -f requirements.txt ]; then
            uv pip install -r requirements.txt
          else
            echo "No infra dependencies to install."
          fi

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_URI }}
          tags: |
            type=sha
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
